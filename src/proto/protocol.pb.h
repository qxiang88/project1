// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mms {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class TranscodeRequestPB;
class TranscodeResponsePB;
class QueryStateRequestPB;
class QueryStateResponsePB;
class AccessM3U8RequestPB;
class AccessM3U8ResponsePB;
class AccessKeyRequestPB;
class AccessKeyResponsePB;
class TaskMetaPB;
class MediaKeyPB;
class HLSMetaPB;

// ===================================================================

class TranscodeRequestPB : public ::google::protobuf::Message {
 public:
  TranscodeRequestPB();
  virtual ~TranscodeRequestPB();

  TranscodeRequestPB(const TranscodeRequestPB& from);

  inline TranscodeRequestPB& operator=(const TranscodeRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TranscodeRequestPB& default_instance();

  void Swap(TranscodeRequestPB* other);

  // implements Message ----------------------------------------------

  TranscodeRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranscodeRequestPB& from);
  void MergeFrom(const TranscodeRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string media_source_path = 1;
  inline bool has_media_source_path() const;
  inline void clear_media_source_path();
  static const int kMediaSourcePathFieldNumber = 1;
  inline const ::std::string& media_source_path() const;
  inline void set_media_source_path(const ::std::string& value);
  inline void set_media_source_path(const char* value);
  inline void set_media_source_path(const char* value, size_t size);
  inline ::std::string* mutable_media_source_path();
  inline ::std::string* release_media_source_path();
  inline void set_allocated_media_source_path(::std::string* media_source_path);

  // optional string media_target_format = 2;
  inline bool has_media_target_format() const;
  inline void clear_media_target_format();
  static const int kMediaTargetFormatFieldNumber = 2;
  inline const ::std::string& media_target_format() const;
  inline void set_media_target_format(const ::std::string& value);
  inline void set_media_target_format(const char* value);
  inline void set_media_target_format(const char* value, size_t size);
  inline ::std::string* mutable_media_target_format();
  inline ::std::string* release_media_target_format();
  inline void set_allocated_media_target_format(::std::string* media_target_format);

  // optional string notify_url = 3;
  inline bool has_notify_url() const;
  inline void clear_notify_url();
  static const int kNotifyUrlFieldNumber = 3;
  inline const ::std::string& notify_url() const;
  inline void set_notify_url(const ::std::string& value);
  inline void set_notify_url(const char* value);
  inline void set_notify_url(const char* value, size_t size);
  inline ::std::string* mutable_notify_url();
  inline ::std::string* release_notify_url();
  inline void set_allocated_notify_url(::std::string* notify_url);

  // @@protoc_insertion_point(class_scope:mms.TranscodeRequestPB)
 private:
  inline void set_has_media_source_path();
  inline void clear_has_media_source_path();
  inline void set_has_media_target_format();
  inline void clear_has_media_target_format();
  inline void set_has_notify_url();
  inline void clear_has_notify_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* media_source_path_;
  ::std::string* media_target_format_;
  ::std::string* notify_url_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static TranscodeRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class TranscodeResponsePB : public ::google::protobuf::Message {
 public:
  TranscodeResponsePB();
  virtual ~TranscodeResponsePB();

  TranscodeResponsePB(const TranscodeResponsePB& from);

  inline TranscodeResponsePB& operator=(const TranscodeResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TranscodeResponsePB& default_instance();

  void Swap(TranscodeResponsePB* other);

  // implements Message ----------------------------------------------

  TranscodeResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranscodeResponsePB& from);
  void MergeFrom(const TranscodeResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mms.TranscodeResponsePB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static TranscodeResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class QueryStateRequestPB : public ::google::protobuf::Message {
 public:
  QueryStateRequestPB();
  virtual ~QueryStateRequestPB();

  QueryStateRequestPB(const QueryStateRequestPB& from);

  inline QueryStateRequestPB& operator=(const QueryStateRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStateRequestPB& default_instance();

  void Swap(QueryStateRequestPB* other);

  // implements Message ----------------------------------------------

  QueryStateRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryStateRequestPB& from);
  void MergeFrom(const QueryStateRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mms.QueryStateRequestPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static QueryStateRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class QueryStateResponsePB : public ::google::protobuf::Message {
 public:
  QueryStateResponsePB();
  virtual ~QueryStateResponsePB();

  QueryStateResponsePB(const QueryStateResponsePB& from);

  inline QueryStateResponsePB& operator=(const QueryStateResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStateResponsePB& default_instance();

  void Swap(QueryStateResponsePB* other);

  // implements Message ----------------------------------------------

  QueryStateResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryStateResponsePB& from);
  void MergeFrom(const QueryStateResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // @@protoc_insertion_point(class_scope:mms.QueryStateResponsePB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* state_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static QueryStateResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class AccessM3U8RequestPB : public ::google::protobuf::Message {
 public:
  AccessM3U8RequestPB();
  virtual ~AccessM3U8RequestPB();

  AccessM3U8RequestPB(const AccessM3U8RequestPB& from);

  inline AccessM3U8RequestPB& operator=(const AccessM3U8RequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessM3U8RequestPB& default_instance();

  void Swap(AccessM3U8RequestPB* other);

  // implements Message ----------------------------------------------

  AccessM3U8RequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessM3U8RequestPB& from);
  void MergeFrom(const AccessM3U8RequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mms.AccessM3U8RequestPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static AccessM3U8RequestPB* default_instance_;
};
// -------------------------------------------------------------------

class AccessM3U8ResponsePB : public ::google::protobuf::Message {
 public:
  AccessM3U8ResponsePB();
  virtual ~AccessM3U8ResponsePB();

  AccessM3U8ResponsePB(const AccessM3U8ResponsePB& from);

  inline AccessM3U8ResponsePB& operator=(const AccessM3U8ResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessM3U8ResponsePB& default_instance();

  void Swap(AccessM3U8ResponsePB* other);

  // implements Message ----------------------------------------------

  AccessM3U8ResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessM3U8ResponsePB& from);
  void MergeFrom(const AccessM3U8ResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mms.AccessM3U8ResponsePB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static AccessM3U8ResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class AccessKeyRequestPB : public ::google::protobuf::Message {
 public:
  AccessKeyRequestPB();
  virtual ~AccessKeyRequestPB();

  AccessKeyRequestPB(const AccessKeyRequestPB& from);

  inline AccessKeyRequestPB& operator=(const AccessKeyRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessKeyRequestPB& default_instance();

  void Swap(AccessKeyRequestPB* other);

  // implements Message ----------------------------------------------

  AccessKeyRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessKeyRequestPB& from);
  void MergeFrom(const AccessKeyRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:mms.AccessKeyRequestPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* token_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static AccessKeyRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class AccessKeyResponsePB : public ::google::protobuf::Message {
 public:
  AccessKeyResponsePB();
  virtual ~AccessKeyResponsePB();

  AccessKeyResponsePB(const AccessKeyResponsePB& from);

  inline AccessKeyResponsePB& operator=(const AccessKeyResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessKeyResponsePB& default_instance();

  void Swap(AccessKeyResponsePB* other);

  // implements Message ----------------------------------------------

  AccessKeyResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessKeyResponsePB& from);
  void MergeFrom(const AccessKeyResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:mms.AccessKeyResponsePB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* key_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static AccessKeyResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class TaskMetaPB : public ::google::protobuf::Message {
 public:
  TaskMetaPB();
  virtual ~TaskMetaPB();

  TaskMetaPB(const TaskMetaPB& from);

  inline TaskMetaPB& operator=(const TaskMetaPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskMetaPB& default_instance();

  void Swap(TaskMetaPB* other);

  // implements Message ----------------------------------------------

  TaskMetaPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskMetaPB& from);
  void MergeFrom(const TaskMetaPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string state_str = 2;
  inline bool has_state_str() const;
  inline void clear_state_str();
  static const int kStateStrFieldNumber = 2;
  inline const ::std::string& state_str() const;
  inline void set_state_str(const ::std::string& value);
  inline void set_state_str(const char* value);
  inline void set_state_str(const char* value, size_t size);
  inline ::std::string* mutable_state_str();
  inline ::std::string* release_state_str();
  inline void set_allocated_state_str(::std::string* state_str);

  // required int32 state_int = 3;
  inline bool has_state_int() const;
  inline void clear_state_int();
  static const int kStateIntFieldNumber = 3;
  inline ::google::protobuf::int32 state_int() const;
  inline void set_state_int(::google::protobuf::int32 value);

  // required string media_source_path = 4;
  inline bool has_media_source_path() const;
  inline void clear_media_source_path();
  static const int kMediaSourcePathFieldNumber = 4;
  inline const ::std::string& media_source_path() const;
  inline void set_media_source_path(const ::std::string& value);
  inline void set_media_source_path(const char* value);
  inline void set_media_source_path(const char* value, size_t size);
  inline ::std::string* mutable_media_source_path();
  inline ::std::string* release_media_source_path();
  inline void set_allocated_media_source_path(::std::string* media_source_path);

  // required string target_format = 5;
  inline bool has_target_format() const;
  inline void clear_target_format();
  static const int kTargetFormatFieldNumber = 5;
  inline const ::std::string& target_format() const;
  inline void set_target_format(const ::std::string& value);
  inline void set_target_format(const char* value);
  inline void set_target_format(const char* value, size_t size);
  inline ::std::string* mutable_target_format();
  inline ::std::string* release_target_format();
  inline void set_allocated_target_format(::std::string* target_format);

  // optional string create_at = 6;
  inline bool has_create_at() const;
  inline void clear_create_at();
  static const int kCreateAtFieldNumber = 6;
  inline const ::std::string& create_at() const;
  inline void set_create_at(const ::std::string& value);
  inline void set_create_at(const char* value);
  inline void set_create_at(const char* value, size_t size);
  inline ::std::string* mutable_create_at();
  inline ::std::string* release_create_at();
  inline void set_allocated_create_at(::std::string* create_at);

  // optional string last_update_at = 7;
  inline bool has_last_update_at() const;
  inline void clear_last_update_at();
  static const int kLastUpdateAtFieldNumber = 7;
  inline const ::std::string& last_update_at() const;
  inline void set_last_update_at(const ::std::string& value);
  inline void set_last_update_at(const char* value);
  inline void set_last_update_at(const char* value, size_t size);
  inline ::std::string* mutable_last_update_at();
  inline ::std::string* release_last_update_at();
  inline void set_allocated_last_update_at(::std::string* last_update_at);

  // @@protoc_insertion_point(class_scope:mms.TaskMetaPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_state_str();
  inline void clear_has_state_str();
  inline void set_has_state_int();
  inline void clear_has_state_int();
  inline void set_has_media_source_path();
  inline void clear_has_media_source_path();
  inline void set_has_target_format();
  inline void clear_has_target_format();
  inline void set_has_create_at();
  inline void clear_has_create_at();
  inline void set_has_last_update_at();
  inline void clear_has_last_update_at();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* state_str_;
  ::std::string* media_source_path_;
  ::std::string* target_format_;
  ::std::string* create_at_;
  ::std::string* last_update_at_;
  ::google::protobuf::int32 state_int_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static TaskMetaPB* default_instance_;
};
// -------------------------------------------------------------------

class MediaKeyPB : public ::google::protobuf::Message {
 public:
  MediaKeyPB();
  virtual ~MediaKeyPB();

  MediaKeyPB(const MediaKeyPB& from);

  inline MediaKeyPB& operator=(const MediaKeyPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaKeyPB& default_instance();

  void Swap(MediaKeyPB* other);

  // implements Message ----------------------------------------------

  MediaKeyPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaKeyPB& from);
  void MergeFrom(const MediaKeyPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string iv = 2;
  inline bool has_iv() const;
  inline void clear_iv();
  static const int kIvFieldNumber = 2;
  inline const ::std::string& iv() const;
  inline void set_iv(const ::std::string& value);
  inline void set_iv(const char* value);
  inline void set_iv(const char* value, size_t size);
  inline ::std::string* mutable_iv();
  inline ::std::string* release_iv();
  inline void set_allocated_iv(::std::string* iv);

  // @@protoc_insertion_point(class_scope:mms.MediaKeyPB)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_iv();
  inline void clear_has_iv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* iv_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static MediaKeyPB* default_instance_;
};
// -------------------------------------------------------------------

class HLSMetaPB : public ::google::protobuf::Message {
 public:
  HLSMetaPB();
  virtual ~HLSMetaPB();

  HLSMetaPB(const HLSMetaPB& from);

  inline HLSMetaPB& operator=(const HLSMetaPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HLSMetaPB& default_instance();

  void Swap(HLSMetaPB* other);

  // implements Message ----------------------------------------------

  HLSMetaPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HLSMetaPB& from);
  void MergeFrom(const HLSMetaPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string gfs_m3u8_path = 2;
  inline bool has_gfs_m3u8_path() const;
  inline void clear_gfs_m3u8_path();
  static const int kGfsM3U8PathFieldNumber = 2;
  inline const ::std::string& gfs_m3u8_path() const;
  inline void set_gfs_m3u8_path(const ::std::string& value);
  inline void set_gfs_m3u8_path(const char* value);
  inline void set_gfs_m3u8_path(const char* value, size_t size);
  inline ::std::string* mutable_gfs_m3u8_path();
  inline ::std::string* release_gfs_m3u8_path();
  inline void set_allocated_gfs_m3u8_path(::std::string* gfs_m3u8_path);

  // required .mms.MediaKeyPB media_key = 3;
  inline bool has_media_key() const;
  inline void clear_media_key();
  static const int kMediaKeyFieldNumber = 3;
  inline const ::mms::MediaKeyPB& media_key() const;
  inline ::mms::MediaKeyPB* mutable_media_key();
  inline ::mms::MediaKeyPB* release_media_key();
  inline void set_allocated_media_key(::mms::MediaKeyPB* media_key);

  // optional string create_at = 4;
  inline bool has_create_at() const;
  inline void clear_create_at();
  static const int kCreateAtFieldNumber = 4;
  inline const ::std::string& create_at() const;
  inline void set_create_at(const ::std::string& value);
  inline void set_create_at(const char* value);
  inline void set_create_at(const char* value, size_t size);
  inline ::std::string* mutable_create_at();
  inline ::std::string* release_create_at();
  inline void set_allocated_create_at(::std::string* create_at);

  // @@protoc_insertion_point(class_scope:mms.HLSMetaPB)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_gfs_m3u8_path();
  inline void clear_has_gfs_m3u8_path();
  inline void set_has_media_key();
  inline void clear_has_media_key();
  inline void set_has_create_at();
  inline void clear_has_create_at();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* gfs_m3u8_path_;
  ::mms::MediaKeyPB* media_key_;
  ::std::string* create_at_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static HLSMetaPB* default_instance_;
};
// ===================================================================


// ===================================================================

// TranscodeRequestPB

// required string media_source_path = 1;
inline bool TranscodeRequestPB::has_media_source_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TranscodeRequestPB::set_has_media_source_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TranscodeRequestPB::clear_has_media_source_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TranscodeRequestPB::clear_media_source_path() {
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_->clear();
  }
  clear_has_media_source_path();
}
inline const ::std::string& TranscodeRequestPB::media_source_path() const {
  // @@protoc_insertion_point(field_get:mms.TranscodeRequestPB.media_source_path)
  return *media_source_path_;
}
inline void TranscodeRequestPB::set_media_source_path(const ::std::string& value) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TranscodeRequestPB.media_source_path)
}
inline void TranscodeRequestPB::set_media_source_path(const char* value) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TranscodeRequestPB.media_source_path)
}
inline void TranscodeRequestPB::set_media_source_path(const char* value, size_t size) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TranscodeRequestPB.media_source_path)
}
inline ::std::string* TranscodeRequestPB::mutable_media_source_path() {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TranscodeRequestPB.media_source_path)
  return media_source_path_;
}
inline ::std::string* TranscodeRequestPB::release_media_source_path() {
  clear_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = media_source_path_;
    media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TranscodeRequestPB::set_allocated_media_source_path(::std::string* media_source_path) {
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_source_path_;
  }
  if (media_source_path) {
    set_has_media_source_path();
    media_source_path_ = media_source_path;
  } else {
    clear_has_media_source_path();
    media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TranscodeRequestPB.media_source_path)
}

// optional string media_target_format = 2;
inline bool TranscodeRequestPB::has_media_target_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TranscodeRequestPB::set_has_media_target_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TranscodeRequestPB::clear_has_media_target_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TranscodeRequestPB::clear_media_target_format() {
  if (media_target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_target_format_->clear();
  }
  clear_has_media_target_format();
}
inline const ::std::string& TranscodeRequestPB::media_target_format() const {
  // @@protoc_insertion_point(field_get:mms.TranscodeRequestPB.media_target_format)
  return *media_target_format_;
}
inline void TranscodeRequestPB::set_media_target_format(const ::std::string& value) {
  set_has_media_target_format();
  if (media_target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_target_format_ = new ::std::string;
  }
  media_target_format_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TranscodeRequestPB.media_target_format)
}
inline void TranscodeRequestPB::set_media_target_format(const char* value) {
  set_has_media_target_format();
  if (media_target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_target_format_ = new ::std::string;
  }
  media_target_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TranscodeRequestPB.media_target_format)
}
inline void TranscodeRequestPB::set_media_target_format(const char* value, size_t size) {
  set_has_media_target_format();
  if (media_target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_target_format_ = new ::std::string;
  }
  media_target_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TranscodeRequestPB.media_target_format)
}
inline ::std::string* TranscodeRequestPB::mutable_media_target_format() {
  set_has_media_target_format();
  if (media_target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_target_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TranscodeRequestPB.media_target_format)
  return media_target_format_;
}
inline ::std::string* TranscodeRequestPB::release_media_target_format() {
  clear_has_media_target_format();
  if (media_target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = media_target_format_;
    media_target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TranscodeRequestPB::set_allocated_media_target_format(::std::string* media_target_format) {
  if (media_target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_target_format_;
  }
  if (media_target_format) {
    set_has_media_target_format();
    media_target_format_ = media_target_format;
  } else {
    clear_has_media_target_format();
    media_target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TranscodeRequestPB.media_target_format)
}

// optional string notify_url = 3;
inline bool TranscodeRequestPB::has_notify_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TranscodeRequestPB::set_has_notify_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TranscodeRequestPB::clear_has_notify_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TranscodeRequestPB::clear_notify_url() {
  if (notify_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_url_->clear();
  }
  clear_has_notify_url();
}
inline const ::std::string& TranscodeRequestPB::notify_url() const {
  // @@protoc_insertion_point(field_get:mms.TranscodeRequestPB.notify_url)
  return *notify_url_;
}
inline void TranscodeRequestPB::set_notify_url(const ::std::string& value) {
  set_has_notify_url();
  if (notify_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_url_ = new ::std::string;
  }
  notify_url_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TranscodeRequestPB.notify_url)
}
inline void TranscodeRequestPB::set_notify_url(const char* value) {
  set_has_notify_url();
  if (notify_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_url_ = new ::std::string;
  }
  notify_url_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TranscodeRequestPB.notify_url)
}
inline void TranscodeRequestPB::set_notify_url(const char* value, size_t size) {
  set_has_notify_url();
  if (notify_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_url_ = new ::std::string;
  }
  notify_url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TranscodeRequestPB.notify_url)
}
inline ::std::string* TranscodeRequestPB::mutable_notify_url() {
  set_has_notify_url();
  if (notify_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TranscodeRequestPB.notify_url)
  return notify_url_;
}
inline ::std::string* TranscodeRequestPB::release_notify_url() {
  clear_has_notify_url();
  if (notify_url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notify_url_;
    notify_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TranscodeRequestPB::set_allocated_notify_url(::std::string* notify_url) {
  if (notify_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notify_url_;
  }
  if (notify_url) {
    set_has_notify_url();
    notify_url_ = notify_url;
  } else {
    clear_has_notify_url();
    notify_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TranscodeRequestPB.notify_url)
}

// -------------------------------------------------------------------

// TranscodeResponsePB

// required string uuid = 1;
inline bool TranscodeResponsePB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TranscodeResponsePB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TranscodeResponsePB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TranscodeResponsePB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& TranscodeResponsePB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.TranscodeResponsePB.uuid)
  return *uuid_;
}
inline void TranscodeResponsePB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TranscodeResponsePB.uuid)
}
inline void TranscodeResponsePB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TranscodeResponsePB.uuid)
}
inline void TranscodeResponsePB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TranscodeResponsePB.uuid)
}
inline ::std::string* TranscodeResponsePB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TranscodeResponsePB.uuid)
  return uuid_;
}
inline ::std::string* TranscodeResponsePB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TranscodeResponsePB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TranscodeResponsePB.uuid)
}

// -------------------------------------------------------------------

// QueryStateRequestPB

// required string uuid = 1;
inline bool QueryStateRequestPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStateRequestPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryStateRequestPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryStateRequestPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& QueryStateRequestPB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.QueryStateRequestPB.uuid)
  return *uuid_;
}
inline void QueryStateRequestPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.QueryStateRequestPB.uuid)
}
inline void QueryStateRequestPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.QueryStateRequestPB.uuid)
}
inline void QueryStateRequestPB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.QueryStateRequestPB.uuid)
}
inline ::std::string* QueryStateRequestPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.QueryStateRequestPB.uuid)
  return uuid_;
}
inline ::std::string* QueryStateRequestPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryStateRequestPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.QueryStateRequestPB.uuid)
}

// -------------------------------------------------------------------

// QueryStateResponsePB

// required string uuid = 1;
inline bool QueryStateResponsePB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStateResponsePB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryStateResponsePB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryStateResponsePB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& QueryStateResponsePB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.QueryStateResponsePB.uuid)
  return *uuid_;
}
inline void QueryStateResponsePB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.QueryStateResponsePB.uuid)
}
inline void QueryStateResponsePB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.QueryStateResponsePB.uuid)
}
inline void QueryStateResponsePB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.QueryStateResponsePB.uuid)
}
inline ::std::string* QueryStateResponsePB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.QueryStateResponsePB.uuid)
  return uuid_;
}
inline ::std::string* QueryStateResponsePB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryStateResponsePB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.QueryStateResponsePB.uuid)
}

// required string state = 2;
inline bool QueryStateResponsePB::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryStateResponsePB::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryStateResponsePB::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryStateResponsePB::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& QueryStateResponsePB::state() const {
  // @@protoc_insertion_point(field_get:mms.QueryStateResponsePB.state)
  return *state_;
}
inline void QueryStateResponsePB::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:mms.QueryStateResponsePB.state)
}
inline void QueryStateResponsePB::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.QueryStateResponsePB.state)
}
inline void QueryStateResponsePB::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.QueryStateResponsePB.state)
}
inline ::std::string* QueryStateResponsePB::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.QueryStateResponsePB.state)
  return state_;
}
inline ::std::string* QueryStateResponsePB::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryStateResponsePB::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.QueryStateResponsePB.state)
}

// -------------------------------------------------------------------

// AccessM3U8RequestPB

// required string uuid = 1;
inline bool AccessM3U8RequestPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessM3U8RequestPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessM3U8RequestPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessM3U8RequestPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& AccessM3U8RequestPB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.AccessM3U8RequestPB.uuid)
  return *uuid_;
}
inline void AccessM3U8RequestPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessM3U8RequestPB.uuid)
}
inline void AccessM3U8RequestPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessM3U8RequestPB.uuid)
}
inline void AccessM3U8RequestPB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessM3U8RequestPB.uuid)
}
inline ::std::string* AccessM3U8RequestPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessM3U8RequestPB.uuid)
  return uuid_;
}
inline ::std::string* AccessM3U8RequestPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessM3U8RequestPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessM3U8RequestPB.uuid)
}

// -------------------------------------------------------------------

// AccessM3U8ResponsePB

// required string uuid = 1;
inline bool AccessM3U8ResponsePB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessM3U8ResponsePB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessM3U8ResponsePB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessM3U8ResponsePB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& AccessM3U8ResponsePB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.AccessM3U8ResponsePB.uuid)
  return *uuid_;
}
inline void AccessM3U8ResponsePB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessM3U8ResponsePB.uuid)
}
inline void AccessM3U8ResponsePB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessM3U8ResponsePB.uuid)
}
inline void AccessM3U8ResponsePB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessM3U8ResponsePB.uuid)
}
inline ::std::string* AccessM3U8ResponsePB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessM3U8ResponsePB.uuid)
  return uuid_;
}
inline ::std::string* AccessM3U8ResponsePB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessM3U8ResponsePB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessM3U8ResponsePB.uuid)
}

// -------------------------------------------------------------------

// AccessKeyRequestPB

// required string uuid = 1;
inline bool AccessKeyRequestPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessKeyRequestPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessKeyRequestPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessKeyRequestPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& AccessKeyRequestPB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.AccessKeyRequestPB.uuid)
  return *uuid_;
}
inline void AccessKeyRequestPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessKeyRequestPB.uuid)
}
inline void AccessKeyRequestPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessKeyRequestPB.uuid)
}
inline void AccessKeyRequestPB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessKeyRequestPB.uuid)
}
inline ::std::string* AccessKeyRequestPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessKeyRequestPB.uuid)
  return uuid_;
}
inline ::std::string* AccessKeyRequestPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessKeyRequestPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessKeyRequestPB.uuid)
}

// required string token = 2;
inline bool AccessKeyRequestPB::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessKeyRequestPB::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessKeyRequestPB::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessKeyRequestPB::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& AccessKeyRequestPB::token() const {
  // @@protoc_insertion_point(field_get:mms.AccessKeyRequestPB.token)
  return *token_;
}
inline void AccessKeyRequestPB::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessKeyRequestPB.token)
}
inline void AccessKeyRequestPB::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessKeyRequestPB.token)
}
inline void AccessKeyRequestPB::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessKeyRequestPB.token)
}
inline ::std::string* AccessKeyRequestPB::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessKeyRequestPB.token)
  return token_;
}
inline ::std::string* AccessKeyRequestPB::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessKeyRequestPB::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessKeyRequestPB.token)
}

// -------------------------------------------------------------------

// AccessKeyResponsePB

// required string uuid = 1;
inline bool AccessKeyResponsePB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessKeyResponsePB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessKeyResponsePB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessKeyResponsePB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& AccessKeyResponsePB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.AccessKeyResponsePB.uuid)
  return *uuid_;
}
inline void AccessKeyResponsePB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessKeyResponsePB.uuid)
}
inline void AccessKeyResponsePB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessKeyResponsePB.uuid)
}
inline void AccessKeyResponsePB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessKeyResponsePB.uuid)
}
inline ::std::string* AccessKeyResponsePB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessKeyResponsePB.uuid)
  return uuid_;
}
inline ::std::string* AccessKeyResponsePB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessKeyResponsePB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessKeyResponsePB.uuid)
}

// optional string key = 2;
inline bool AccessKeyResponsePB::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessKeyResponsePB::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessKeyResponsePB::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessKeyResponsePB::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AccessKeyResponsePB::key() const {
  // @@protoc_insertion_point(field_get:mms.AccessKeyResponsePB.key)
  return *key_;
}
inline void AccessKeyResponsePB::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:mms.AccessKeyResponsePB.key)
}
inline void AccessKeyResponsePB::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.AccessKeyResponsePB.key)
}
inline void AccessKeyResponsePB::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.AccessKeyResponsePB.key)
}
inline ::std::string* AccessKeyResponsePB::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.AccessKeyResponsePB.key)
  return key_;
}
inline ::std::string* AccessKeyResponsePB::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AccessKeyResponsePB::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.AccessKeyResponsePB.key)
}

// -------------------------------------------------------------------

// TaskMetaPB

// required string uuid = 1;
inline bool TaskMetaPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskMetaPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskMetaPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskMetaPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& TaskMetaPB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.uuid)
  return *uuid_;
}
inline void TaskMetaPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.uuid)
}
inline void TaskMetaPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.uuid)
}
inline void TaskMetaPB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.uuid)
}
inline ::std::string* TaskMetaPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.uuid)
  return uuid_;
}
inline ::std::string* TaskMetaPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.uuid)
}

// required string state_str = 2;
inline bool TaskMetaPB::has_state_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskMetaPB::set_has_state_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskMetaPB::clear_has_state_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskMetaPB::clear_state_str() {
  if (state_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_str_->clear();
  }
  clear_has_state_str();
}
inline const ::std::string& TaskMetaPB::state_str() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.state_str)
  return *state_str_;
}
inline void TaskMetaPB::set_state_str(const ::std::string& value) {
  set_has_state_str();
  if (state_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_str_ = new ::std::string;
  }
  state_str_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.state_str)
}
inline void TaskMetaPB::set_state_str(const char* value) {
  set_has_state_str();
  if (state_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_str_ = new ::std::string;
  }
  state_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.state_str)
}
inline void TaskMetaPB::set_state_str(const char* value, size_t size) {
  set_has_state_str();
  if (state_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_str_ = new ::std::string;
  }
  state_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.state_str)
}
inline ::std::string* TaskMetaPB::mutable_state_str() {
  set_has_state_str();
  if (state_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.state_str)
  return state_str_;
}
inline ::std::string* TaskMetaPB::release_state_str() {
  clear_has_state_str();
  if (state_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_str_;
    state_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_state_str(::std::string* state_str) {
  if (state_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_str_;
  }
  if (state_str) {
    set_has_state_str();
    state_str_ = state_str;
  } else {
    clear_has_state_str();
    state_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.state_str)
}

// required int32 state_int = 3;
inline bool TaskMetaPB::has_state_int() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskMetaPB::set_has_state_int() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskMetaPB::clear_has_state_int() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskMetaPB::clear_state_int() {
  state_int_ = 0;
  clear_has_state_int();
}
inline ::google::protobuf::int32 TaskMetaPB::state_int() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.state_int)
  return state_int_;
}
inline void TaskMetaPB::set_state_int(::google::protobuf::int32 value) {
  set_has_state_int();
  state_int_ = value;
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.state_int)
}

// required string media_source_path = 4;
inline bool TaskMetaPB::has_media_source_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskMetaPB::set_has_media_source_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskMetaPB::clear_has_media_source_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskMetaPB::clear_media_source_path() {
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_->clear();
  }
  clear_has_media_source_path();
}
inline const ::std::string& TaskMetaPB::media_source_path() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.media_source_path)
  return *media_source_path_;
}
inline void TaskMetaPB::set_media_source_path(const ::std::string& value) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.media_source_path)
}
inline void TaskMetaPB::set_media_source_path(const char* value) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.media_source_path)
}
inline void TaskMetaPB::set_media_source_path(const char* value, size_t size) {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  media_source_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.media_source_path)
}
inline ::std::string* TaskMetaPB::mutable_media_source_path() {
  set_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    media_source_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.media_source_path)
  return media_source_path_;
}
inline ::std::string* TaskMetaPB::release_media_source_path() {
  clear_has_media_source_path();
  if (media_source_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = media_source_path_;
    media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_media_source_path(::std::string* media_source_path) {
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_source_path_;
  }
  if (media_source_path) {
    set_has_media_source_path();
    media_source_path_ = media_source_path;
  } else {
    clear_has_media_source_path();
    media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.media_source_path)
}

// required string target_format = 5;
inline bool TaskMetaPB::has_target_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskMetaPB::set_has_target_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskMetaPB::clear_has_target_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskMetaPB::clear_target_format() {
  if (target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_format_->clear();
  }
  clear_has_target_format();
}
inline const ::std::string& TaskMetaPB::target_format() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.target_format)
  return *target_format_;
}
inline void TaskMetaPB::set_target_format(const ::std::string& value) {
  set_has_target_format();
  if (target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_format_ = new ::std::string;
  }
  target_format_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.target_format)
}
inline void TaskMetaPB::set_target_format(const char* value) {
  set_has_target_format();
  if (target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_format_ = new ::std::string;
  }
  target_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.target_format)
}
inline void TaskMetaPB::set_target_format(const char* value, size_t size) {
  set_has_target_format();
  if (target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_format_ = new ::std::string;
  }
  target_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.target_format)
}
inline ::std::string* TaskMetaPB::mutable_target_format() {
  set_has_target_format();
  if (target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.target_format)
  return target_format_;
}
inline ::std::string* TaskMetaPB::release_target_format() {
  clear_has_target_format();
  if (target_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_format_;
    target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_target_format(::std::string* target_format) {
  if (target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_format_;
  }
  if (target_format) {
    set_has_target_format();
    target_format_ = target_format;
  } else {
    clear_has_target_format();
    target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.target_format)
}

// optional string create_at = 6;
inline bool TaskMetaPB::has_create_at() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskMetaPB::set_has_create_at() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskMetaPB::clear_has_create_at() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskMetaPB::clear_create_at() {
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_->clear();
  }
  clear_has_create_at();
}
inline const ::std::string& TaskMetaPB::create_at() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.create_at)
  return *create_at_;
}
inline void TaskMetaPB::set_create_at(const ::std::string& value) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.create_at)
}
inline void TaskMetaPB::set_create_at(const char* value) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.create_at)
}
inline void TaskMetaPB::set_create_at(const char* value, size_t size) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.create_at)
}
inline ::std::string* TaskMetaPB::mutable_create_at() {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.create_at)
  return create_at_;
}
inline ::std::string* TaskMetaPB::release_create_at() {
  clear_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = create_at_;
    create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_create_at(::std::string* create_at) {
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_at_;
  }
  if (create_at) {
    set_has_create_at();
    create_at_ = create_at;
  } else {
    clear_has_create_at();
    create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.create_at)
}

// optional string last_update_at = 7;
inline bool TaskMetaPB::has_last_update_at() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskMetaPB::set_has_last_update_at() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskMetaPB::clear_has_last_update_at() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskMetaPB::clear_last_update_at() {
  if (last_update_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_update_at_->clear();
  }
  clear_has_last_update_at();
}
inline const ::std::string& TaskMetaPB::last_update_at() const {
  // @@protoc_insertion_point(field_get:mms.TaskMetaPB.last_update_at)
  return *last_update_at_;
}
inline void TaskMetaPB::set_last_update_at(const ::std::string& value) {
  set_has_last_update_at();
  if (last_update_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_update_at_ = new ::std::string;
  }
  last_update_at_->assign(value);
  // @@protoc_insertion_point(field_set:mms.TaskMetaPB.last_update_at)
}
inline void TaskMetaPB::set_last_update_at(const char* value) {
  set_has_last_update_at();
  if (last_update_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_update_at_ = new ::std::string;
  }
  last_update_at_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.TaskMetaPB.last_update_at)
}
inline void TaskMetaPB::set_last_update_at(const char* value, size_t size) {
  set_has_last_update_at();
  if (last_update_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_update_at_ = new ::std::string;
  }
  last_update_at_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.TaskMetaPB.last_update_at)
}
inline ::std::string* TaskMetaPB::mutable_last_update_at() {
  set_has_last_update_at();
  if (last_update_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_update_at_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.TaskMetaPB.last_update_at)
  return last_update_at_;
}
inline ::std::string* TaskMetaPB::release_last_update_at() {
  clear_has_last_update_at();
  if (last_update_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_update_at_;
    last_update_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskMetaPB::set_allocated_last_update_at(::std::string* last_update_at) {
  if (last_update_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_update_at_;
  }
  if (last_update_at) {
    set_has_last_update_at();
    last_update_at_ = last_update_at;
  } else {
    clear_has_last_update_at();
    last_update_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.TaskMetaPB.last_update_at)
}

// -------------------------------------------------------------------

// MediaKeyPB

// required string key = 1;
inline bool MediaKeyPB::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaKeyPB::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaKeyPB::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaKeyPB::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MediaKeyPB::key() const {
  // @@protoc_insertion_point(field_get:mms.MediaKeyPB.key)
  return *key_;
}
inline void MediaKeyPB::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:mms.MediaKeyPB.key)
}
inline void MediaKeyPB::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.MediaKeyPB.key)
}
inline void MediaKeyPB::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.MediaKeyPB.key)
}
inline ::std::string* MediaKeyPB::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.MediaKeyPB.key)
  return key_;
}
inline ::std::string* MediaKeyPB::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MediaKeyPB::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.MediaKeyPB.key)
}

// required string iv = 2;
inline bool MediaKeyPB::has_iv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaKeyPB::set_has_iv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaKeyPB::clear_has_iv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaKeyPB::clear_iv() {
  if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iv_->clear();
  }
  clear_has_iv();
}
inline const ::std::string& MediaKeyPB::iv() const {
  // @@protoc_insertion_point(field_get:mms.MediaKeyPB.iv)
  return *iv_;
}
inline void MediaKeyPB::set_iv(const ::std::string& value) {
  set_has_iv();
  if (iv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iv_ = new ::std::string;
  }
  iv_->assign(value);
  // @@protoc_insertion_point(field_set:mms.MediaKeyPB.iv)
}
inline void MediaKeyPB::set_iv(const char* value) {
  set_has_iv();
  if (iv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iv_ = new ::std::string;
  }
  iv_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.MediaKeyPB.iv)
}
inline void MediaKeyPB::set_iv(const char* value, size_t size) {
  set_has_iv();
  if (iv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iv_ = new ::std::string;
  }
  iv_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.MediaKeyPB.iv)
}
inline ::std::string* MediaKeyPB::mutable_iv() {
  set_has_iv();
  if (iv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iv_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.MediaKeyPB.iv)
  return iv_;
}
inline ::std::string* MediaKeyPB::release_iv() {
  clear_has_iv();
  if (iv_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iv_;
    iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MediaKeyPB::set_allocated_iv(::std::string* iv) {
  if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iv_;
  }
  if (iv) {
    set_has_iv();
    iv_ = iv;
  } else {
    clear_has_iv();
    iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.MediaKeyPB.iv)
}

// -------------------------------------------------------------------

// HLSMetaPB

// required string uuid = 1;
inline bool HLSMetaPB::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HLSMetaPB::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HLSMetaPB::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HLSMetaPB::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& HLSMetaPB::uuid() const {
  // @@protoc_insertion_point(field_get:mms.HLSMetaPB.uuid)
  return *uuid_;
}
inline void HLSMetaPB::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:mms.HLSMetaPB.uuid)
}
inline void HLSMetaPB::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.HLSMetaPB.uuid)
}
inline void HLSMetaPB::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.HLSMetaPB.uuid)
}
inline ::std::string* HLSMetaPB::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.HLSMetaPB.uuid)
  return uuid_;
}
inline ::std::string* HLSMetaPB::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HLSMetaPB::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.HLSMetaPB.uuid)
}

// required string gfs_m3u8_path = 2;
inline bool HLSMetaPB::has_gfs_m3u8_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HLSMetaPB::set_has_gfs_m3u8_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HLSMetaPB::clear_has_gfs_m3u8_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HLSMetaPB::clear_gfs_m3u8_path() {
  if (gfs_m3u8_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gfs_m3u8_path_->clear();
  }
  clear_has_gfs_m3u8_path();
}
inline const ::std::string& HLSMetaPB::gfs_m3u8_path() const {
  // @@protoc_insertion_point(field_get:mms.HLSMetaPB.gfs_m3u8_path)
  return *gfs_m3u8_path_;
}
inline void HLSMetaPB::set_gfs_m3u8_path(const ::std::string& value) {
  set_has_gfs_m3u8_path();
  if (gfs_m3u8_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gfs_m3u8_path_ = new ::std::string;
  }
  gfs_m3u8_path_->assign(value);
  // @@protoc_insertion_point(field_set:mms.HLSMetaPB.gfs_m3u8_path)
}
inline void HLSMetaPB::set_gfs_m3u8_path(const char* value) {
  set_has_gfs_m3u8_path();
  if (gfs_m3u8_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gfs_m3u8_path_ = new ::std::string;
  }
  gfs_m3u8_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.HLSMetaPB.gfs_m3u8_path)
}
inline void HLSMetaPB::set_gfs_m3u8_path(const char* value, size_t size) {
  set_has_gfs_m3u8_path();
  if (gfs_m3u8_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gfs_m3u8_path_ = new ::std::string;
  }
  gfs_m3u8_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.HLSMetaPB.gfs_m3u8_path)
}
inline ::std::string* HLSMetaPB::mutable_gfs_m3u8_path() {
  set_has_gfs_m3u8_path();
  if (gfs_m3u8_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gfs_m3u8_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.HLSMetaPB.gfs_m3u8_path)
  return gfs_m3u8_path_;
}
inline ::std::string* HLSMetaPB::release_gfs_m3u8_path() {
  clear_has_gfs_m3u8_path();
  if (gfs_m3u8_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gfs_m3u8_path_;
    gfs_m3u8_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HLSMetaPB::set_allocated_gfs_m3u8_path(::std::string* gfs_m3u8_path) {
  if (gfs_m3u8_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gfs_m3u8_path_;
  }
  if (gfs_m3u8_path) {
    set_has_gfs_m3u8_path();
    gfs_m3u8_path_ = gfs_m3u8_path;
  } else {
    clear_has_gfs_m3u8_path();
    gfs_m3u8_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.HLSMetaPB.gfs_m3u8_path)
}

// required .mms.MediaKeyPB media_key = 3;
inline bool HLSMetaPB::has_media_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HLSMetaPB::set_has_media_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HLSMetaPB::clear_has_media_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HLSMetaPB::clear_media_key() {
  if (media_key_ != NULL) media_key_->::mms::MediaKeyPB::Clear();
  clear_has_media_key();
}
inline const ::mms::MediaKeyPB& HLSMetaPB::media_key() const {
  // @@protoc_insertion_point(field_get:mms.HLSMetaPB.media_key)
  return media_key_ != NULL ? *media_key_ : *default_instance_->media_key_;
}
inline ::mms::MediaKeyPB* HLSMetaPB::mutable_media_key() {
  set_has_media_key();
  if (media_key_ == NULL) media_key_ = new ::mms::MediaKeyPB;
  // @@protoc_insertion_point(field_mutable:mms.HLSMetaPB.media_key)
  return media_key_;
}
inline ::mms::MediaKeyPB* HLSMetaPB::release_media_key() {
  clear_has_media_key();
  ::mms::MediaKeyPB* temp = media_key_;
  media_key_ = NULL;
  return temp;
}
inline void HLSMetaPB::set_allocated_media_key(::mms::MediaKeyPB* media_key) {
  delete media_key_;
  media_key_ = media_key;
  if (media_key) {
    set_has_media_key();
  } else {
    clear_has_media_key();
  }
  // @@protoc_insertion_point(field_set_allocated:mms.HLSMetaPB.media_key)
}

// optional string create_at = 4;
inline bool HLSMetaPB::has_create_at() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HLSMetaPB::set_has_create_at() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HLSMetaPB::clear_has_create_at() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HLSMetaPB::clear_create_at() {
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_->clear();
  }
  clear_has_create_at();
}
inline const ::std::string& HLSMetaPB::create_at() const {
  // @@protoc_insertion_point(field_get:mms.HLSMetaPB.create_at)
  return *create_at_;
}
inline void HLSMetaPB::set_create_at(const ::std::string& value) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(value);
  // @@protoc_insertion_point(field_set:mms.HLSMetaPB.create_at)
}
inline void HLSMetaPB::set_create_at(const char* value) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(value);
  // @@protoc_insertion_point(field_set_char:mms.HLSMetaPB.create_at)
}
inline void HLSMetaPB::set_create_at(const char* value, size_t size) {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  create_at_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mms.HLSMetaPB.create_at)
}
inline ::std::string* HLSMetaPB::mutable_create_at() {
  set_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    create_at_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mms.HLSMetaPB.create_at)
  return create_at_;
}
inline ::std::string* HLSMetaPB::release_create_at() {
  clear_has_create_at();
  if (create_at_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = create_at_;
    create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HLSMetaPB::set_allocated_create_at(::std::string* create_at) {
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_at_;
  }
  if (create_at) {
    set_has_create_at();
    create_at_ = create_at;
  } else {
    clear_has_create_at();
    create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mms.HLSMetaPB.create_at)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
