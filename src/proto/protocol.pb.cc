// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mms {

namespace {

const ::google::protobuf::Descriptor* TranscodeRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranscodeRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranscodeResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranscodeResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryStateRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryStateRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryStateResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryStateResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessM3U8RequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessM3U8RequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessM3U8ResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessM3U8ResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessKeyRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessKeyRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessKeyResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessKeyResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskMetaPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskMetaPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaKeyPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaKeyPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* HLSMetaPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HLSMetaPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  TranscodeRequestPB_descriptor_ = file->message_type(0);
  static const int TranscodeRequestPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequestPB, media_source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequestPB, media_target_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequestPB, notify_url_),
  };
  TranscodeRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranscodeRequestPB_descriptor_,
      TranscodeRequestPB::default_instance_,
      TranscodeRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranscodeRequestPB));
  TranscodeResponsePB_descriptor_ = file->message_type(1);
  static const int TranscodeResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponsePB, uuid_),
  };
  TranscodeResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranscodeResponsePB_descriptor_,
      TranscodeResponsePB::default_instance_,
      TranscodeResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranscodeResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranscodeResponsePB));
  QueryStateRequestPB_descriptor_ = file->message_type(2);
  static const int QueryStateRequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateRequestPB, uuid_),
  };
  QueryStateRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryStateRequestPB_descriptor_,
      QueryStateRequestPB::default_instance_,
      QueryStateRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryStateRequestPB));
  QueryStateResponsePB_descriptor_ = file->message_type(3);
  static const int QueryStateResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateResponsePB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateResponsePB, state_),
  };
  QueryStateResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryStateResponsePB_descriptor_,
      QueryStateResponsePB::default_instance_,
      QueryStateResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStateResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryStateResponsePB));
  AccessM3U8RequestPB_descriptor_ = file->message_type(4);
  static const int AccessM3U8RequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8RequestPB, uuid_),
  };
  AccessM3U8RequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessM3U8RequestPB_descriptor_,
      AccessM3U8RequestPB::default_instance_,
      AccessM3U8RequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8RequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8RequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessM3U8RequestPB));
  AccessM3U8ResponsePB_descriptor_ = file->message_type(5);
  static const int AccessM3U8ResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8ResponsePB, uuid_),
  };
  AccessM3U8ResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessM3U8ResponsePB_descriptor_,
      AccessM3U8ResponsePB::default_instance_,
      AccessM3U8ResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8ResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessM3U8ResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessM3U8ResponsePB));
  AccessKeyRequestPB_descriptor_ = file->message_type(6);
  static const int AccessKeyRequestPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyRequestPB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyRequestPB, token_),
  };
  AccessKeyRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessKeyRequestPB_descriptor_,
      AccessKeyRequestPB::default_instance_,
      AccessKeyRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessKeyRequestPB));
  AccessKeyResponsePB_descriptor_ = file->message_type(7);
  static const int AccessKeyResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyResponsePB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyResponsePB, key_),
  };
  AccessKeyResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessKeyResponsePB_descriptor_,
      AccessKeyResponsePB::default_instance_,
      AccessKeyResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessKeyResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessKeyResponsePB));
  TaskMetaPB_descriptor_ = file->message_type(8);
  static const int TaskMetaPB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, state_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, state_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, media_source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, target_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, create_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, last_update_at_),
  };
  TaskMetaPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskMetaPB_descriptor_,
      TaskMetaPB::default_instance_,
      TaskMetaPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskMetaPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskMetaPB));
  MediaKeyPB_descriptor_ = file->message_type(9);
  static const int MediaKeyPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaKeyPB, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaKeyPB, iv_),
  };
  MediaKeyPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaKeyPB_descriptor_,
      MediaKeyPB::default_instance_,
      MediaKeyPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaKeyPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaKeyPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaKeyPB));
  HLSMetaPB_descriptor_ = file->message_type(10);
  static const int HLSMetaPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, gfs_m3u8_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, media_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, create_at_),
  };
  HLSMetaPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HLSMetaPB_descriptor_,
      HLSMetaPB::default_instance_,
      HLSMetaPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HLSMetaPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HLSMetaPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranscodeRequestPB_descriptor_, &TranscodeRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranscodeResponsePB_descriptor_, &TranscodeResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryStateRequestPB_descriptor_, &QueryStateRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryStateResponsePB_descriptor_, &QueryStateResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessM3U8RequestPB_descriptor_, &AccessM3U8RequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessM3U8ResponsePB_descriptor_, &AccessM3U8ResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessKeyRequestPB_descriptor_, &AccessKeyRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessKeyResponsePB_descriptor_, &AccessKeyResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskMetaPB_descriptor_, &TaskMetaPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaKeyPB_descriptor_, &MediaKeyPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HLSMetaPB_descriptor_, &HLSMetaPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  delete TranscodeRequestPB::default_instance_;
  delete TranscodeRequestPB_reflection_;
  delete TranscodeResponsePB::default_instance_;
  delete TranscodeResponsePB_reflection_;
  delete QueryStateRequestPB::default_instance_;
  delete QueryStateRequestPB_reflection_;
  delete QueryStateResponsePB::default_instance_;
  delete QueryStateResponsePB_reflection_;
  delete AccessM3U8RequestPB::default_instance_;
  delete AccessM3U8RequestPB_reflection_;
  delete AccessM3U8ResponsePB::default_instance_;
  delete AccessM3U8ResponsePB_reflection_;
  delete AccessKeyRequestPB::default_instance_;
  delete AccessKeyRequestPB_reflection_;
  delete AccessKeyResponsePB::default_instance_;
  delete AccessKeyResponsePB_reflection_;
  delete TaskMetaPB::default_instance_;
  delete TaskMetaPB_reflection_;
  delete MediaKeyPB::default_instance_;
  delete MediaKeyPB_reflection_;
  delete HLSMetaPB::default_instance_;
  delete HLSMetaPB_reflection_;
}

void protobuf_AddDesc_protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\003mms\"`\n\022TranscodeReques"
    "tPB\022\031\n\021media_source_path\030\001 \002(\t\022\033\n\023media_"
    "target_format\030\002 \001(\t\022\022\n\nnotify_url\030\003 \001(\t\""
    "#\n\023TranscodeResponsePB\022\014\n\004uuid\030\001 \002(\t\"#\n\023"
    "QueryStateRequestPB\022\014\n\004uuid\030\001 \002(\t\"3\n\024Que"
    "ryStateResponsePB\022\014\n\004uuid\030\001 \002(\t\022\r\n\005state"
    "\030\002 \002(\t\"#\n\023AccessM3U8RequestPB\022\014\n\004uuid\030\001 "
    "\002(\t\"$\n\024AccessM3U8ResponsePB\022\014\n\004uuid\030\001 \002("
    "\t\"1\n\022AccessKeyRequestPB\022\014\n\004uuid\030\001 \002(\t\022\r\n"
    "\005token\030\002 \002(\t\"0\n\023AccessKeyResponsePB\022\014\n\004u"
    "uid\030\001 \002(\t\022\013\n\003key\030\002 \001(\t\"\235\001\n\nTaskMetaPB\022\014\n"
    "\004uuid\030\001 \002(\t\022\021\n\tstate_str\030\002 \002(\t\022\021\n\tstate_"
    "int\030\003 \002(\005\022\031\n\021media_source_path\030\004 \002(\t\022\025\n\r"
    "target_format\030\005 \002(\t\022\021\n\tcreate_at\030\006 \001(\t\022\026"
    "\n\016last_update_at\030\007 \001(\t\"%\n\nMediaKeyPB\022\013\n\003"
    "key\030\001 \002(\t\022\n\n\002iv\030\002 \002(\t\"g\n\tHLSMetaPB\022\014\n\004uu"
    "id\030\001 \002(\t\022\025\n\rgfs_m3u8_path\030\002 \002(\t\022\"\n\tmedia"
    "_key\030\003 \002(\0132\017.mms.MediaKeyPB\022\021\n\tcreate_at"
    "\030\004 \001(\t", 726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  TranscodeRequestPB::default_instance_ = new TranscodeRequestPB();
  TranscodeResponsePB::default_instance_ = new TranscodeResponsePB();
  QueryStateRequestPB::default_instance_ = new QueryStateRequestPB();
  QueryStateResponsePB::default_instance_ = new QueryStateResponsePB();
  AccessM3U8RequestPB::default_instance_ = new AccessM3U8RequestPB();
  AccessM3U8ResponsePB::default_instance_ = new AccessM3U8ResponsePB();
  AccessKeyRequestPB::default_instance_ = new AccessKeyRequestPB();
  AccessKeyResponsePB::default_instance_ = new AccessKeyResponsePB();
  TaskMetaPB::default_instance_ = new TaskMetaPB();
  MediaKeyPB::default_instance_ = new MediaKeyPB();
  HLSMetaPB::default_instance_ = new HLSMetaPB();
  TranscodeRequestPB::default_instance_->InitAsDefaultInstance();
  TranscodeResponsePB::default_instance_->InitAsDefaultInstance();
  QueryStateRequestPB::default_instance_->InitAsDefaultInstance();
  QueryStateResponsePB::default_instance_->InitAsDefaultInstance();
  AccessM3U8RequestPB::default_instance_->InitAsDefaultInstance();
  AccessM3U8ResponsePB::default_instance_->InitAsDefaultInstance();
  AccessKeyRequestPB::default_instance_->InitAsDefaultInstance();
  AccessKeyResponsePB::default_instance_->InitAsDefaultInstance();
  TaskMetaPB::default_instance_->InitAsDefaultInstance();
  MediaKeyPB::default_instance_->InitAsDefaultInstance();
  HLSMetaPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TranscodeRequestPB::kMediaSourcePathFieldNumber;
const int TranscodeRequestPB::kMediaTargetFormatFieldNumber;
const int TranscodeRequestPB::kNotifyUrlFieldNumber;
#endif  // !_MSC_VER

TranscodeRequestPB::TranscodeRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.TranscodeRequestPB)
}

void TranscodeRequestPB::InitAsDefaultInstance() {
}

TranscodeRequestPB::TranscodeRequestPB(const TranscodeRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.TranscodeRequestPB)
}

void TranscodeRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranscodeRequestPB::~TranscodeRequestPB() {
  // @@protoc_insertion_point(destructor:mms.TranscodeRequestPB)
  SharedDtor();
}

void TranscodeRequestPB::SharedDtor() {
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_source_path_;
  }
  if (media_target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_target_format_;
  }
  if (notify_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notify_url_;
  }
  if (this != default_instance_) {
  }
}

void TranscodeRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranscodeRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranscodeRequestPB_descriptor_;
}

const TranscodeRequestPB& TranscodeRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

TranscodeRequestPB* TranscodeRequestPB::default_instance_ = NULL;

TranscodeRequestPB* TranscodeRequestPB::New() const {
  return new TranscodeRequestPB;
}

void TranscodeRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_media_source_path()) {
      if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_source_path_->clear();
      }
    }
    if (has_media_target_format()) {
      if (media_target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_target_format_->clear();
      }
    }
    if (has_notify_url()) {
      if (notify_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notify_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranscodeRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.TranscodeRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string media_source_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_source_path().data(), this->media_source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_source_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_target_format;
        break;
      }

      // optional string media_target_format = 2;
      case 2: {
        if (tag == 18) {
         parse_media_target_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_target_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_target_format().data(), this->media_target_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_target_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_notify_url;
        break;
      }

      // optional string notify_url = 3;
      case 3: {
        if (tag == 26) {
         parse_notify_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notify_url().data(), this->notify_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notify_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.TranscodeRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.TranscodeRequestPB)
  return false;
#undef DO_
}

void TranscodeRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.TranscodeRequestPB)
  // required string media_source_path = 1;
  if (has_media_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_source_path(), output);
  }

  // optional string media_target_format = 2;
  if (has_media_target_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_target_format().data(), this->media_target_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_target_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_target_format(), output);
  }

  // optional string notify_url = 3;
  if (has_notify_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notify_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notify_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.TranscodeRequestPB)
}

::google::protobuf::uint8* TranscodeRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.TranscodeRequestPB)
  // required string media_source_path = 1;
  if (has_media_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_source_path(), target);
  }

  // optional string media_target_format = 2;
  if (has_media_target_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_target_format().data(), this->media_target_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_target_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_target_format(), target);
  }

  // optional string notify_url = 3;
  if (has_notify_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notify_url().data(), this->notify_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notify_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notify_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.TranscodeRequestPB)
  return target;
}

int TranscodeRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string media_source_path = 1;
    if (has_media_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_source_path());
    }

    // optional string media_target_format = 2;
    if (has_media_target_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_target_format());
    }

    // optional string notify_url = 3;
    if (has_notify_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notify_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranscodeRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranscodeRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranscodeRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranscodeRequestPB::MergeFrom(const TranscodeRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_source_path()) {
      set_media_source_path(from.media_source_path());
    }
    if (from.has_media_target_format()) {
      set_media_target_format(from.media_target_format());
    }
    if (from.has_notify_url()) {
      set_notify_url(from.notify_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranscodeRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscodeRequestPB::CopyFrom(const TranscodeRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscodeRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TranscodeRequestPB::Swap(TranscodeRequestPB* other) {
  if (other != this) {
    std::swap(media_source_path_, other->media_source_path_);
    std::swap(media_target_format_, other->media_target_format_);
    std::swap(notify_url_, other->notify_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranscodeRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranscodeRequestPB_descriptor_;
  metadata.reflection = TranscodeRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TranscodeResponsePB::kUuidFieldNumber;
#endif  // !_MSC_VER

TranscodeResponsePB::TranscodeResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.TranscodeResponsePB)
}

void TranscodeResponsePB::InitAsDefaultInstance() {
}

TranscodeResponsePB::TranscodeResponsePB(const TranscodeResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.TranscodeResponsePB)
}

void TranscodeResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranscodeResponsePB::~TranscodeResponsePB() {
  // @@protoc_insertion_point(destructor:mms.TranscodeResponsePB)
  SharedDtor();
}

void TranscodeResponsePB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void TranscodeResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranscodeResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranscodeResponsePB_descriptor_;
}

const TranscodeResponsePB& TranscodeResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

TranscodeResponsePB* TranscodeResponsePB::default_instance_ = NULL;

TranscodeResponsePB* TranscodeResponsePB::New() const {
  return new TranscodeResponsePB;
}

void TranscodeResponsePB::Clear() {
  if (has_uuid()) {
    if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uuid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranscodeResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.TranscodeResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.TranscodeResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.TranscodeResponsePB)
  return false;
#undef DO_
}

void TranscodeResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.TranscodeResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.TranscodeResponsePB)
}

::google::protobuf::uint8* TranscodeResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.TranscodeResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.TranscodeResponsePB)
  return target;
}

int TranscodeResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranscodeResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranscodeResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranscodeResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranscodeResponsePB::MergeFrom(const TranscodeResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranscodeResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscodeResponsePB::CopyFrom(const TranscodeResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscodeResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TranscodeResponsePB::Swap(TranscodeResponsePB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranscodeResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranscodeResponsePB_descriptor_;
  metadata.reflection = TranscodeResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryStateRequestPB::kUuidFieldNumber;
#endif  // !_MSC_VER

QueryStateRequestPB::QueryStateRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.QueryStateRequestPB)
}

void QueryStateRequestPB::InitAsDefaultInstance() {
}

QueryStateRequestPB::QueryStateRequestPB(const QueryStateRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.QueryStateRequestPB)
}

void QueryStateRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryStateRequestPB::~QueryStateRequestPB() {
  // @@protoc_insertion_point(destructor:mms.QueryStateRequestPB)
  SharedDtor();
}

void QueryStateRequestPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void QueryStateRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStateRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryStateRequestPB_descriptor_;
}

const QueryStateRequestPB& QueryStateRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

QueryStateRequestPB* QueryStateRequestPB::default_instance_ = NULL;

QueryStateRequestPB* QueryStateRequestPB::New() const {
  return new QueryStateRequestPB;
}

void QueryStateRequestPB::Clear() {
  if (has_uuid()) {
    if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uuid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryStateRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.QueryStateRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.QueryStateRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.QueryStateRequestPB)
  return false;
#undef DO_
}

void QueryStateRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.QueryStateRequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.QueryStateRequestPB)
}

::google::protobuf::uint8* QueryStateRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.QueryStateRequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.QueryStateRequestPB)
  return target;
}

int QueryStateRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStateRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryStateRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryStateRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryStateRequestPB::MergeFrom(const QueryStateRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryStateRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStateRequestPB::CopyFrom(const QueryStateRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStateRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryStateRequestPB::Swap(QueryStateRequestPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryStateRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryStateRequestPB_descriptor_;
  metadata.reflection = QueryStateRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryStateResponsePB::kUuidFieldNumber;
const int QueryStateResponsePB::kStateFieldNumber;
#endif  // !_MSC_VER

QueryStateResponsePB::QueryStateResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.QueryStateResponsePB)
}

void QueryStateResponsePB::InitAsDefaultInstance() {
}

QueryStateResponsePB::QueryStateResponsePB(const QueryStateResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.QueryStateResponsePB)
}

void QueryStateResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryStateResponsePB::~QueryStateResponsePB() {
  // @@protoc_insertion_point(destructor:mms.QueryStateResponsePB)
  SharedDtor();
}

void QueryStateResponsePB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void QueryStateResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStateResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryStateResponsePB_descriptor_;
}

const QueryStateResponsePB& QueryStateResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

QueryStateResponsePB* QueryStateResponsePB::default_instance_ = NULL;

QueryStateResponsePB* QueryStateResponsePB::New() const {
  return new QueryStateResponsePB;
}

void QueryStateResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryStateResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.QueryStateResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // required string state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.QueryStateResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.QueryStateResponsePB)
  return false;
#undef DO_
}

void QueryStateResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.QueryStateResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.QueryStateResponsePB)
}

::google::protobuf::uint8* QueryStateResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.QueryStateResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.QueryStateResponsePB)
  return target;
}

int QueryStateResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStateResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryStateResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryStateResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryStateResponsePB::MergeFrom(const QueryStateResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryStateResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStateResponsePB::CopyFrom(const QueryStateResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStateResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void QueryStateResponsePB::Swap(QueryStateResponsePB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryStateResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryStateResponsePB_descriptor_;
  metadata.reflection = QueryStateResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessM3U8RequestPB::kUuidFieldNumber;
#endif  // !_MSC_VER

AccessM3U8RequestPB::AccessM3U8RequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.AccessM3U8RequestPB)
}

void AccessM3U8RequestPB::InitAsDefaultInstance() {
}

AccessM3U8RequestPB::AccessM3U8RequestPB(const AccessM3U8RequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.AccessM3U8RequestPB)
}

void AccessM3U8RequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessM3U8RequestPB::~AccessM3U8RequestPB() {
  // @@protoc_insertion_point(destructor:mms.AccessM3U8RequestPB)
  SharedDtor();
}

void AccessM3U8RequestPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void AccessM3U8RequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessM3U8RequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessM3U8RequestPB_descriptor_;
}

const AccessM3U8RequestPB& AccessM3U8RequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

AccessM3U8RequestPB* AccessM3U8RequestPB::default_instance_ = NULL;

AccessM3U8RequestPB* AccessM3U8RequestPB::New() const {
  return new AccessM3U8RequestPB;
}

void AccessM3U8RequestPB::Clear() {
  if (has_uuid()) {
    if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uuid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessM3U8RequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.AccessM3U8RequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.AccessM3U8RequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.AccessM3U8RequestPB)
  return false;
#undef DO_
}

void AccessM3U8RequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.AccessM3U8RequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.AccessM3U8RequestPB)
}

::google::protobuf::uint8* AccessM3U8RequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.AccessM3U8RequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.AccessM3U8RequestPB)
  return target;
}

int AccessM3U8RequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessM3U8RequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessM3U8RequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessM3U8RequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessM3U8RequestPB::MergeFrom(const AccessM3U8RequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessM3U8RequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessM3U8RequestPB::CopyFrom(const AccessM3U8RequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessM3U8RequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccessM3U8RequestPB::Swap(AccessM3U8RequestPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessM3U8RequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessM3U8RequestPB_descriptor_;
  metadata.reflection = AccessM3U8RequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessM3U8ResponsePB::kUuidFieldNumber;
#endif  // !_MSC_VER

AccessM3U8ResponsePB::AccessM3U8ResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.AccessM3U8ResponsePB)
}

void AccessM3U8ResponsePB::InitAsDefaultInstance() {
}

AccessM3U8ResponsePB::AccessM3U8ResponsePB(const AccessM3U8ResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.AccessM3U8ResponsePB)
}

void AccessM3U8ResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessM3U8ResponsePB::~AccessM3U8ResponsePB() {
  // @@protoc_insertion_point(destructor:mms.AccessM3U8ResponsePB)
  SharedDtor();
}

void AccessM3U8ResponsePB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void AccessM3U8ResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessM3U8ResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessM3U8ResponsePB_descriptor_;
}

const AccessM3U8ResponsePB& AccessM3U8ResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

AccessM3U8ResponsePB* AccessM3U8ResponsePB::default_instance_ = NULL;

AccessM3U8ResponsePB* AccessM3U8ResponsePB::New() const {
  return new AccessM3U8ResponsePB;
}

void AccessM3U8ResponsePB::Clear() {
  if (has_uuid()) {
    if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uuid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessM3U8ResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.AccessM3U8ResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.AccessM3U8ResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.AccessM3U8ResponsePB)
  return false;
#undef DO_
}

void AccessM3U8ResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.AccessM3U8ResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.AccessM3U8ResponsePB)
}

::google::protobuf::uint8* AccessM3U8ResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.AccessM3U8ResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.AccessM3U8ResponsePB)
  return target;
}

int AccessM3U8ResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessM3U8ResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessM3U8ResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessM3U8ResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessM3U8ResponsePB::MergeFrom(const AccessM3U8ResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessM3U8ResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessM3U8ResponsePB::CopyFrom(const AccessM3U8ResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessM3U8ResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccessM3U8ResponsePB::Swap(AccessM3U8ResponsePB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessM3U8ResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessM3U8ResponsePB_descriptor_;
  metadata.reflection = AccessM3U8ResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessKeyRequestPB::kUuidFieldNumber;
const int AccessKeyRequestPB::kTokenFieldNumber;
#endif  // !_MSC_VER

AccessKeyRequestPB::AccessKeyRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.AccessKeyRequestPB)
}

void AccessKeyRequestPB::InitAsDefaultInstance() {
}

AccessKeyRequestPB::AccessKeyRequestPB(const AccessKeyRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.AccessKeyRequestPB)
}

void AccessKeyRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessKeyRequestPB::~AccessKeyRequestPB() {
  // @@protoc_insertion_point(destructor:mms.AccessKeyRequestPB)
  SharedDtor();
}

void AccessKeyRequestPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AccessKeyRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessKeyRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessKeyRequestPB_descriptor_;
}

const AccessKeyRequestPB& AccessKeyRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

AccessKeyRequestPB* AccessKeyRequestPB::default_instance_ = NULL;

AccessKeyRequestPB* AccessKeyRequestPB::New() const {
  return new AccessKeyRequestPB;
}

void AccessKeyRequestPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessKeyRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.AccessKeyRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.AccessKeyRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.AccessKeyRequestPB)
  return false;
#undef DO_
}

void AccessKeyRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.AccessKeyRequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.AccessKeyRequestPB)
}

::google::protobuf::uint8* AccessKeyRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.AccessKeyRequestPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.AccessKeyRequestPB)
  return target;
}

int AccessKeyRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessKeyRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessKeyRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessKeyRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessKeyRequestPB::MergeFrom(const AccessKeyRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessKeyRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessKeyRequestPB::CopyFrom(const AccessKeyRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessKeyRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AccessKeyRequestPB::Swap(AccessKeyRequestPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessKeyRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessKeyRequestPB_descriptor_;
  metadata.reflection = AccessKeyRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccessKeyResponsePB::kUuidFieldNumber;
const int AccessKeyResponsePB::kKeyFieldNumber;
#endif  // !_MSC_VER

AccessKeyResponsePB::AccessKeyResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.AccessKeyResponsePB)
}

void AccessKeyResponsePB::InitAsDefaultInstance() {
}

AccessKeyResponsePB::AccessKeyResponsePB(const AccessKeyResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.AccessKeyResponsePB)
}

void AccessKeyResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessKeyResponsePB::~AccessKeyResponsePB() {
  // @@protoc_insertion_point(destructor:mms.AccessKeyResponsePB)
  SharedDtor();
}

void AccessKeyResponsePB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void AccessKeyResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessKeyResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessKeyResponsePB_descriptor_;
}

const AccessKeyResponsePB& AccessKeyResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

AccessKeyResponsePB* AccessKeyResponsePB::default_instance_ = NULL;

AccessKeyResponsePB* AccessKeyResponsePB::New() const {
  return new AccessKeyResponsePB;
}

void AccessKeyResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessKeyResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.AccessKeyResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.AccessKeyResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.AccessKeyResponsePB)
  return false;
#undef DO_
}

void AccessKeyResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.AccessKeyResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.AccessKeyResponsePB)
}

::google::protobuf::uint8* AccessKeyResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.AccessKeyResponsePB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.AccessKeyResponsePB)
  return target;
}

int AccessKeyResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessKeyResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessKeyResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessKeyResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessKeyResponsePB::MergeFrom(const AccessKeyResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessKeyResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessKeyResponsePB::CopyFrom(const AccessKeyResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessKeyResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccessKeyResponsePB::Swap(AccessKeyResponsePB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessKeyResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessKeyResponsePB_descriptor_;
  metadata.reflection = AccessKeyResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskMetaPB::kUuidFieldNumber;
const int TaskMetaPB::kStateStrFieldNumber;
const int TaskMetaPB::kStateIntFieldNumber;
const int TaskMetaPB::kMediaSourcePathFieldNumber;
const int TaskMetaPB::kTargetFormatFieldNumber;
const int TaskMetaPB::kCreateAtFieldNumber;
const int TaskMetaPB::kLastUpdateAtFieldNumber;
#endif  // !_MSC_VER

TaskMetaPB::TaskMetaPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.TaskMetaPB)
}

void TaskMetaPB::InitAsDefaultInstance() {
}

TaskMetaPB::TaskMetaPB(const TaskMetaPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.TaskMetaPB)
}

void TaskMetaPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_int_ = 0;
  media_source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskMetaPB::~TaskMetaPB() {
  // @@protoc_insertion_point(destructor:mms.TaskMetaPB)
  SharedDtor();
}

void TaskMetaPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (state_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_str_;
  }
  if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_source_path_;
  }
  if (target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_format_;
  }
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_at_;
  }
  if (last_update_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_update_at_;
  }
  if (this != default_instance_) {
  }
}

void TaskMetaPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskMetaPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskMetaPB_descriptor_;
}

const TaskMetaPB& TaskMetaPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

TaskMetaPB* TaskMetaPB::default_instance_ = NULL;

TaskMetaPB* TaskMetaPB::New() const {
  return new TaskMetaPB;
}

void TaskMetaPB::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_state_str()) {
      if (state_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_str_->clear();
      }
    }
    state_int_ = 0;
    if (has_media_source_path()) {
      if (media_source_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_source_path_->clear();
      }
    }
    if (has_target_format()) {
      if (target_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_format_->clear();
      }
    }
    if (has_create_at()) {
      if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        create_at_->clear();
      }
    }
    if (has_last_update_at()) {
      if (last_update_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_update_at_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskMetaPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.TaskMetaPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state_str;
        break;
      }

      // required string state_str = 2;
      case 2: {
        if (tag == 18) {
         parse_state_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state_str().data(), this->state_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state_int;
        break;
      }

      // required int32 state_int = 3;
      case 3: {
        if (tag == 24) {
         parse_state_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_int_)));
          set_has_state_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_media_source_path;
        break;
      }

      // required string media_source_path = 4;
      case 4: {
        if (tag == 34) {
         parse_media_source_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_source_path().data(), this->media_source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_source_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_format;
        break;
      }

      // required string target_format = 5;
      case 5: {
        if (tag == 42) {
         parse_target_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_format().data(), this->target_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_create_at;
        break;
      }

      // optional string create_at = 6;
      case 6: {
        if (tag == 50) {
         parse_create_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_at().data(), this->create_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_last_update_at;
        break;
      }

      // optional string last_update_at = 7;
      case 7: {
        if (tag == 58) {
         parse_last_update_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_update_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_update_at().data(), this->last_update_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "last_update_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.TaskMetaPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.TaskMetaPB)
  return false;
#undef DO_
}

void TaskMetaPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.TaskMetaPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string state_str = 2;
  if (has_state_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_str().data(), this->state_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->state_str(), output);
  }

  // required int32 state_int = 3;
  if (has_state_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state_int(), output);
  }

  // required string media_source_path = 4;
  if (has_media_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->media_source_path(), output);
  }

  // required string target_format = 5;
  if (has_target_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_format().data(), this->target_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_format(), output);
  }

  // optional string create_at = 6;
  if (has_create_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_at().data(), this->create_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->create_at(), output);
  }

  // optional string last_update_at = 7;
  if (has_last_update_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_update_at().data(), this->last_update_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_update_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->last_update_at(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.TaskMetaPB)
}

::google::protobuf::uint8* TaskMetaPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.TaskMetaPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string state_str = 2;
  if (has_state_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_str().data(), this->state_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->state_str(), target);
  }

  // required int32 state_int = 3;
  if (has_state_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state_int(), target);
  }

  // required string media_source_path = 4;
  if (has_media_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_source_path().data(), this->media_source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->media_source_path(), target);
  }

  // required string target_format = 5;
  if (has_target_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_format().data(), this->target_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_format(), target);
  }

  // optional string create_at = 6;
  if (has_create_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_at().data(), this->create_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->create_at(), target);
  }

  // optional string last_update_at = 7;
  if (has_last_update_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_update_at().data(), this->last_update_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_update_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->last_update_at(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.TaskMetaPB)
  return target;
}

int TaskMetaPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string state_str = 2;
    if (has_state_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_str());
    }

    // required int32 state_int = 3;
    if (has_state_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_int());
    }

    // required string media_source_path = 4;
    if (has_media_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_source_path());
    }

    // required string target_format = 5;
    if (has_target_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_format());
    }

    // optional string create_at = 6;
    if (has_create_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_at());
    }

    // optional string last_update_at = 7;
    if (has_last_update_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_update_at());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskMetaPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskMetaPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskMetaPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskMetaPB::MergeFrom(const TaskMetaPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_state_str()) {
      set_state_str(from.state_str());
    }
    if (from.has_state_int()) {
      set_state_int(from.state_int());
    }
    if (from.has_media_source_path()) {
      set_media_source_path(from.media_source_path());
    }
    if (from.has_target_format()) {
      set_target_format(from.target_format());
    }
    if (from.has_create_at()) {
      set_create_at(from.create_at());
    }
    if (from.has_last_update_at()) {
      set_last_update_at(from.last_update_at());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskMetaPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskMetaPB::CopyFrom(const TaskMetaPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskMetaPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TaskMetaPB::Swap(TaskMetaPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(state_str_, other->state_str_);
    std::swap(state_int_, other->state_int_);
    std::swap(media_source_path_, other->media_source_path_);
    std::swap(target_format_, other->target_format_);
    std::swap(create_at_, other->create_at_);
    std::swap(last_update_at_, other->last_update_at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskMetaPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskMetaPB_descriptor_;
  metadata.reflection = TaskMetaPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaKeyPB::kKeyFieldNumber;
const int MediaKeyPB::kIvFieldNumber;
#endif  // !_MSC_VER

MediaKeyPB::MediaKeyPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.MediaKeyPB)
}

void MediaKeyPB::InitAsDefaultInstance() {
}

MediaKeyPB::MediaKeyPB(const MediaKeyPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.MediaKeyPB)
}

void MediaKeyPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaKeyPB::~MediaKeyPB() {
  // @@protoc_insertion_point(destructor:mms.MediaKeyPB)
  SharedDtor();
}

void MediaKeyPB::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iv_;
  }
  if (this != default_instance_) {
  }
}

void MediaKeyPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaKeyPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaKeyPB_descriptor_;
}

const MediaKeyPB& MediaKeyPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

MediaKeyPB* MediaKeyPB::default_instance_ = NULL;

MediaKeyPB* MediaKeyPB::New() const {
  return new MediaKeyPB;
}

void MediaKeyPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_iv()) {
      if (iv_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iv_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaKeyPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.MediaKeyPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_iv;
        break;
      }

      // required string iv = 2;
      case 2: {
        if (tag == 18) {
         parse_iv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iv().data(), this->iv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.MediaKeyPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.MediaKeyPB)
  return false;
#undef DO_
}

void MediaKeyPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.MediaKeyPB)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string iv = 2;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->iv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.MediaKeyPB)
}

::google::protobuf::uint8* MediaKeyPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.MediaKeyPB)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string iv = 2;
  if (has_iv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iv().data(), this->iv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.MediaKeyPB)
  return target;
}

int MediaKeyPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string iv = 2;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaKeyPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaKeyPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaKeyPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaKeyPB::MergeFrom(const MediaKeyPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_iv()) {
      set_iv(from.iv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaKeyPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaKeyPB::CopyFrom(const MediaKeyPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaKeyPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MediaKeyPB::Swap(MediaKeyPB* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(iv_, other->iv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaKeyPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaKeyPB_descriptor_;
  metadata.reflection = MediaKeyPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HLSMetaPB::kUuidFieldNumber;
const int HLSMetaPB::kGfsM3U8PathFieldNumber;
const int HLSMetaPB::kMediaKeyFieldNumber;
const int HLSMetaPB::kCreateAtFieldNumber;
#endif  // !_MSC_VER

HLSMetaPB::HLSMetaPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.HLSMetaPB)
}

void HLSMetaPB::InitAsDefaultInstance() {
  media_key_ = const_cast< ::mms::MediaKeyPB*>(&::mms::MediaKeyPB::default_instance());
}

HLSMetaPB::HLSMetaPB(const HLSMetaPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.HLSMetaPB)
}

void HLSMetaPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gfs_m3u8_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_key_ = NULL;
  create_at_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HLSMetaPB::~HLSMetaPB() {
  // @@protoc_insertion_point(destructor:mms.HLSMetaPB)
  SharedDtor();
}

void HLSMetaPB::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (gfs_m3u8_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gfs_m3u8_path_;
  }
  if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete create_at_;
  }
  if (this != default_instance_) {
    delete media_key_;
  }
}

void HLSMetaPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HLSMetaPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HLSMetaPB_descriptor_;
}

const HLSMetaPB& HLSMetaPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_2eproto();
  return *default_instance_;
}

HLSMetaPB* HLSMetaPB::default_instance_ = NULL;

HLSMetaPB* HLSMetaPB::New() const {
  return new HLSMetaPB;
}

void HLSMetaPB::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_gfs_m3u8_path()) {
      if (gfs_m3u8_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gfs_m3u8_path_->clear();
      }
    }
    if (has_media_key()) {
      if (media_key_ != NULL) media_key_->::mms::MediaKeyPB::Clear();
    }
    if (has_create_at()) {
      if (create_at_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        create_at_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HLSMetaPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.HLSMetaPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gfs_m3u8_path;
        break;
      }

      // required string gfs_m3u8_path = 2;
      case 2: {
        if (tag == 18) {
         parse_gfs_m3u8_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gfs_m3u8_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gfs_m3u8_path().data(), this->gfs_m3u8_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gfs_m3u8_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media_key;
        break;
      }

      // required .mms.MediaKeyPB media_key = 3;
      case 3: {
        if (tag == 26) {
         parse_media_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_create_at;
        break;
      }

      // optional string create_at = 4;
      case 4: {
        if (tag == 34) {
         parse_create_at:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_at()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->create_at().data(), this->create_at().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "create_at");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mms.HLSMetaPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.HLSMetaPB)
  return false;
#undef DO_
}

void HLSMetaPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.HLSMetaPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string gfs_m3u8_path = 2;
  if (has_gfs_m3u8_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gfs_m3u8_path().data(), this->gfs_m3u8_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gfs_m3u8_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gfs_m3u8_path(), output);
  }

  // required .mms.MediaKeyPB media_key = 3;
  if (has_media_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->media_key(), output);
  }

  // optional string create_at = 4;
  if (has_create_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_at().data(), this->create_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_at");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->create_at(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.HLSMetaPB)
}

::google::protobuf::uint8* HLSMetaPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.HLSMetaPB)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string gfs_m3u8_path = 2;
  if (has_gfs_m3u8_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gfs_m3u8_path().data(), this->gfs_m3u8_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gfs_m3u8_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gfs_m3u8_path(), target);
  }

  // required .mms.MediaKeyPB media_key = 3;
  if (has_media_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->media_key(), target);
  }

  // optional string create_at = 4;
  if (has_create_at()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->create_at().data(), this->create_at().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "create_at");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->create_at(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.HLSMetaPB)
  return target;
}

int HLSMetaPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string gfs_m3u8_path = 2;
    if (has_gfs_m3u8_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gfs_m3u8_path());
    }

    // required .mms.MediaKeyPB media_key = 3;
    if (has_media_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media_key());
    }

    // optional string create_at = 4;
    if (has_create_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_at());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HLSMetaPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HLSMetaPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HLSMetaPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HLSMetaPB::MergeFrom(const HLSMetaPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_gfs_m3u8_path()) {
      set_gfs_m3u8_path(from.gfs_m3u8_path());
    }
    if (from.has_media_key()) {
      mutable_media_key()->::mms::MediaKeyPB::MergeFrom(from.media_key());
    }
    if (from.has_create_at()) {
      set_create_at(from.create_at());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HLSMetaPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HLSMetaPB::CopyFrom(const HLSMetaPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HLSMetaPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_media_key()) {
    if (!this->media_key().IsInitialized()) return false;
  }
  return true;
}

void HLSMetaPB::Swap(HLSMetaPB* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(gfs_m3u8_path_, other->gfs_m3u8_path_);
    std::swap(media_key_, other->media_key_);
    std::swap(create_at_, other->create_at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HLSMetaPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HLSMetaPB_descriptor_;
  metadata.reflection = HLSMetaPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mms

// @@protoc_insertion_point(global_scope)
