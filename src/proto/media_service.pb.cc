// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mms {

namespace {

const ::google::protobuf::Descriptor* MediaHttpRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaHttpRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaHttpResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaHttpResponsePB_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* MediaManagerService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_media_5fservice_2eproto() {
  protobuf_AddDesc_media_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "media_service.proto");
  GOOGLE_CHECK(file != NULL);
  MediaHttpRequestPB_descriptor_ = file->message_type(0);
  static const int MediaHttpRequestPB_offsets_[1] = {
  };
  MediaHttpRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaHttpRequestPB_descriptor_,
      MediaHttpRequestPB::default_instance_,
      MediaHttpRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaHttpRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaHttpRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaHttpRequestPB));
  MediaHttpResponsePB_descriptor_ = file->message_type(1);
  static const int MediaHttpResponsePB_offsets_[1] = {
  };
  MediaHttpResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaHttpResponsePB_descriptor_,
      MediaHttpResponsePB::default_instance_,
      MediaHttpResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaHttpResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaHttpResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaHttpResponsePB));
  MediaManagerService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_media_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaHttpRequestPB_descriptor_, &MediaHttpRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaHttpResponsePB_descriptor_, &MediaHttpResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_media_5fservice_2eproto() {
  delete MediaHttpRequestPB::default_instance_;
  delete MediaHttpRequestPB_reflection_;
  delete MediaHttpResponsePB::default_instance_;
  delete MediaHttpResponsePB_reflection_;
}

void protobuf_AddDesc_media_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023media_service.proto\022\003mms\"\024\n\022MediaHttpR"
    "equestPB\"\025\n\023MediaHttpResponsePB2R\n\023Media"
    "ManagerService\022;\n\006Handle\022\027.mms.MediaHttp"
    "RequestPB\032\030.mms.MediaHttpResponsePBB\003\200\001\001", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media_service.proto", &protobuf_RegisterTypes);
  MediaHttpRequestPB::default_instance_ = new MediaHttpRequestPB();
  MediaHttpResponsePB::default_instance_ = new MediaHttpResponsePB();
  MediaHttpRequestPB::default_instance_->InitAsDefaultInstance();
  MediaHttpResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_media_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_media_5fservice_2eproto {
  StaticDescriptorInitializer_media_5fservice_2eproto() {
    protobuf_AddDesc_media_5fservice_2eproto();
  }
} static_descriptor_initializer_media_5fservice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MediaHttpRequestPB::MediaHttpRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.MediaHttpRequestPB)
}

void MediaHttpRequestPB::InitAsDefaultInstance() {
}

MediaHttpRequestPB::MediaHttpRequestPB(const MediaHttpRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.MediaHttpRequestPB)
}

void MediaHttpRequestPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaHttpRequestPB::~MediaHttpRequestPB() {
  // @@protoc_insertion_point(destructor:mms.MediaHttpRequestPB)
  SharedDtor();
}

void MediaHttpRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaHttpRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaHttpRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaHttpRequestPB_descriptor_;
}

const MediaHttpRequestPB& MediaHttpRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fservice_2eproto();
  return *default_instance_;
}

MediaHttpRequestPB* MediaHttpRequestPB::default_instance_ = NULL;

MediaHttpRequestPB* MediaHttpRequestPB::New() const {
  return new MediaHttpRequestPB;
}

void MediaHttpRequestPB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaHttpRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.MediaHttpRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mms.MediaHttpRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.MediaHttpRequestPB)
  return false;
#undef DO_
}

void MediaHttpRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.MediaHttpRequestPB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.MediaHttpRequestPB)
}

::google::protobuf::uint8* MediaHttpRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.MediaHttpRequestPB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.MediaHttpRequestPB)
  return target;
}

int MediaHttpRequestPB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaHttpRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaHttpRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaHttpRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaHttpRequestPB::MergeFrom(const MediaHttpRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaHttpRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaHttpRequestPB::CopyFrom(const MediaHttpRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaHttpRequestPB::IsInitialized() const {

  return true;
}

void MediaHttpRequestPB::Swap(MediaHttpRequestPB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaHttpRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaHttpRequestPB_descriptor_;
  metadata.reflection = MediaHttpRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MediaHttpResponsePB::MediaHttpResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mms.MediaHttpResponsePB)
}

void MediaHttpResponsePB::InitAsDefaultInstance() {
}

MediaHttpResponsePB::MediaHttpResponsePB(const MediaHttpResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mms.MediaHttpResponsePB)
}

void MediaHttpResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaHttpResponsePB::~MediaHttpResponsePB() {
  // @@protoc_insertion_point(destructor:mms.MediaHttpResponsePB)
  SharedDtor();
}

void MediaHttpResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MediaHttpResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaHttpResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaHttpResponsePB_descriptor_;
}

const MediaHttpResponsePB& MediaHttpResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fservice_2eproto();
  return *default_instance_;
}

MediaHttpResponsePB* MediaHttpResponsePB::default_instance_ = NULL;

MediaHttpResponsePB* MediaHttpResponsePB::New() const {
  return new MediaHttpResponsePB;
}

void MediaHttpResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaHttpResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mms.MediaHttpResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mms.MediaHttpResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mms.MediaHttpResponsePB)
  return false;
#undef DO_
}

void MediaHttpResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mms.MediaHttpResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mms.MediaHttpResponsePB)
}

::google::protobuf::uint8* MediaHttpResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mms.MediaHttpResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mms.MediaHttpResponsePB)
  return target;
}

int MediaHttpResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaHttpResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaHttpResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaHttpResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaHttpResponsePB::MergeFrom(const MediaHttpResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaHttpResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaHttpResponsePB::CopyFrom(const MediaHttpResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaHttpResponsePB::IsInitialized() const {

  return true;
}

void MediaHttpResponsePB::Swap(MediaHttpResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaHttpResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaHttpResponsePB_descriptor_;
  metadata.reflection = MediaHttpResponsePB_reflection_;
  return metadata;
}


// ===================================================================

MediaManagerService::~MediaManagerService() {}

const ::google::protobuf::ServiceDescriptor* MediaManagerService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaManagerService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MediaManagerService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaManagerService_descriptor_;
}

void MediaManagerService::Handle(::google::protobuf::RpcController* controller,
                         const ::mms::MediaHttpRequestPB*,
                         ::mms::MediaHttpResponsePB*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Handle() not implemented.");
  done->Run();
}

void MediaManagerService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), MediaManagerService_descriptor_);
  switch(method->index()) {
    case 0:
      Handle(controller,
             ::google::protobuf::down_cast<const ::mms::MediaHttpRequestPB*>(request),
             ::google::protobuf::down_cast< ::mms::MediaHttpResponsePB*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MediaManagerService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::mms::MediaHttpRequestPB::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& MediaManagerService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::mms::MediaHttpResponsePB::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

MediaManagerService_Stub::MediaManagerService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MediaManagerService_Stub::MediaManagerService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MediaManagerService_Stub::~MediaManagerService_Stub() {
  if (owns_channel_) delete channel_;
}

void MediaManagerService_Stub::Handle(::google::protobuf::RpcController* controller,
                              const ::mms::MediaHttpRequestPB* request,
                              ::mms::MediaHttpResponsePB* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace mms

// @@protoc_insertion_point(global_scope)
